AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VpcCIDR:
    Description: IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.10.0.0/16
  PublicSubnetCIDRZone1:
    Description: >-
      IP range (CIDR notation) for the public subnet in the first Availability
      Zone
    Type: String
    Default: 10.10.1.0/24
  PublicSubnetCIDRZone2:
    Description: >-
      IP range (CIDR notation) for the public subnet in the Second Availability
      Zone
    Type: String
    Default: 10.10.2.0/24

  PrivateSubnetCIDRZone1:
    Description: >-
      IP range (CIDR notation) for the private subnet in the first Availability
      Zone
    Type: String
    Default: 10.10.3.0/24

  PrivateSubnetCIDRZone2:
    Description: >-
      IP range (CIDR notation) for the private subnet in the Second Availability
      Zone
    Type: String
    Default: 10.10.4.0/24
  KeyPairName:
    Description: Name of the keypair to authenticate EC2
    Type: String
    Default: myawskey
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "CloudFormation_VPC"

  PublicSubnetZone1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      CidrBlock: !Ref PublicSubnetCIDRZone1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public_Subnet_us_east_1a

  PublicSubnetZone2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      CidrBlock: !Ref PublicSubnetCIDRZone2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public_Subnet_us_east_1b
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public RTB

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteEntry:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteAssociateZone1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetZone1

  PublicSubnetRouteAssociateZone2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetZone2
  PrivateSubnetZone1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1a
      CidrBlock: !Ref PrivateSubnetCIDRZone1
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private_Subnet_us_east_1a

  PrivateSubnetZone2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: us-east-1b
      CidrBlock: !Ref PrivateSubnetCIDRZone2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: Private_Subnet_us_east_1b

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private RTB

  PrivateSubnetRouteAssociateZone1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetZone1

  PrivateSubnetRouteAssociateZone2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnetZone2

  PublicSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Restricting Public access to WebZone
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Public SG

  PrivateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Restricting the access of App Zone
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: Private SG

  PrivateSGIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allowing SSH from Public SG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref PublicSecurityGroup
      GroupId: !Ref PrivateSecurityGroup

  PublicSGEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Enabling SSH to Private SG
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      DestinationSecurityGroupId: !Ref PrivateSecurityGroup
      GroupId: !Ref PublicSecurityGroup

  PublicNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public NACL

  PublicSubnetNACLAssociationZone1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetZone1
      NetworkAclId:
        Ref: PublicNetworkACL

  PublicSubnetNACLAssociationZone2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnetZone2
      NetworkAclId:
        Ref: PublicNetworkACL

  PublicNetworkAclEntryInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkACL"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  PublicNetworkAclEntryOutbound:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkACL"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  PrivateNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private NACL

  PrivateSubnetNACLAssociationZone1:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetZone1
      NetworkAclId:
        Ref: PrivateNetworkACL

  PrivateSubnetNACLAssociationZone2:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId:
        Ref: PrivateSubnetZone2
      NetworkAclId:
        Ref: PrivateNetworkACL

  PrivateNetworkAclEntryInbound:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId:
        Ref: "PrivateNetworkACL"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  PrivateNetworkAclEntryOutbound:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PrivateNetworkACL"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - EIPForNAT
          - AllocationId
      SubnetId:
        Ref: PublicSubnetZone1
      Tags:
        - Key: Name
          Value: NGW

  EIPForNAT:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: EIP for NatGateway

  PrivateRouteEntry:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: NATGateway

  WebServerInstanceZone1:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1a
      ImageId: ami-08f3d892de259504d
      InstanceType: t2.micro
      SecurityGroupIds:
        - Ref: PublicSecurityGroup
      SubnetId:
        Ref: PublicSubnetZone1
      KeyName: !Sub ${KeyPairName}
      Tags:
        - Key: Name
          Value: Web_Amz_Zone1

  WebServerInstanceZone2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1b
      ImageId: ami-08f3d892de259504d
      InstanceType: t2.micro
      SecurityGroupIds:
        - Ref: PublicSecurityGroup
      SubnetId:
        Ref: PublicSubnetZone2
      KeyName: !Sub ${KeyPairName}
      Tags:
        - Key: Name
          Value: Web_Amz_Zone2

  MicroServerInstanceZone1:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1a
      ImageId: ami-0a0ddd875a1ea2c7f
      InstanceType: t2.micro
      SecurityGroupIds:
        - Ref: PrivateSecurityGroup
      SubnetId:
        Ref: PrivateSubnetZone1
      KeyName: !Sub ${KeyPairName}
      Tags:
        - Key: Name
          Value: Micro_Ubu_Zone1

  MicroServerInstanceZone2:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: us-east-1b
      ImageId: ami-0a0ddd875a1ea2c7f
      InstanceType: t2.micro
      SecurityGroupIds:
        - Ref: PrivateSecurityGroup
      SubnetId:
        Ref: PrivateSubnetZone2
      KeyName: !Sub ${KeyPairName}
      Tags:
        - Key: Name
          Value:  Micro_Ubu_Zone2